import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { Shield, Users, AlertCircle, CheckCircle, ArrowLeft } from 'lucide-react';
import { useAuthStore } from '../../stores/authStore';

const createSafeSchema = z.object({
  name: z.string().min(1, 'Safe name is required'),
  description: z.string().optional(),
  owners: z.array(z.object({
    address: z.string().regex(/^0x[a-fA-F0-9]{40}$/, 'Invalid Ethereum address'),
    name: z.string().min(1, 'Owner name is required')
  })).min(1, 'At least one owner is required'),
  threshold: z.number().min(1, 'Threshold must be at least 1')
}).refine((data) => data.threshold <= data.owners.length, {
  message: 'Threshold cannot exceed number of owners',
  path: ['threshold']
});

type CreateSafeFormData = z.infer<typeof createSafeSchema>;

export const CreateSafePage: React.FC = () => {
  const navigate = useNavigate();
  const { isConnected, address, connect } = useWalletStore();
  const { isAuthenticated, token, user } = useAuthStore();
  const [isCreating, setIsCreating] = useState(false);
  const [showSuccess, setShowSuccess] = useState(false);
  const [createdSafeResult, setCreatedSafeResult] = useState<{
    address: string;
    transactionHash: string;
    blockNumber: number;
    gasUsed: string;
  } | null>(null);
  const [asyncTransactionInfo, setAsyncTransactionInfo] = useState<{
    id: string;
    txHash: string;
    status: string;
    statusCheckUrl: string;
    websocketTopic: string;
  } | null>(null);
  const [networkInfo, setNetworkInfo] = useState<any>(null);

  const {
    register,
    control,
    handleSubmit,
    formState: { errors },
    watch,
    setValue
  } = useForm<CreateSafeFormData>({
    resolver: zodResolver(createSafeSchema),
    defaultValues: {
      name: '',
      description: '',
      owners: [{ address: '', name: '' }],
      threshold: 1
    }
  });

  const { fields, append, remove } = useFieldArray({
    control,
    name: 'owners'
  });

  const watchedOwners = watch('owners');
  const watchedThreshold = watch('threshold');

  const loadNetworkInfo = async () => {
    try {
      // 确保SafeService已初始化
      if (!safeService.initialized) {
        await safeService.initialize();
      }
      const info = await safeService.getNetworkInfo();
      setNetworkInfo(info);
    } catch (error) {
      console.error('Failed to load network info:', error);
    }
  };

  useEffect(() => {
    if (isConnected && address) {
      // Auto-fill current user as first owner
      setValue('owners.0.address', address);
      setValue('owners.0.name', 'You (Current Account)');
      
      // Get network info
      loadNetworkInfo();
    }
  }, [isConnected, address, setValue]);


  const handleConnectWallet = async () => {
    try {
      await connect();
    } catch (error) {
      console.error('Failed to connect wallet:', error);
    }
  };

  const addOwner = () => {
    append({ address: '', name: '' });
  };

  const removeOwner = (index: number) => {
    if (fields.length > 1) {
      remove(index);
      // Adjust threshold if necessary
      if (watchedThreshold > fields.length - 1) {
        setValue('threshold', fields.length - 1);
      }
    }
  };

  const onSubmit = async (data: CreateSafeFormData) => {
    // 首先检查用户登录状态
    if (!isAuthenticated || !token || !user) {
      alert('请先登录后再创建Safe钱包');
      navigate('/login');
      return;
    }

    if (!isConnected) {
      alert('Please connect your wallet first');
      return;
    }

    setIsCreating(true);
    try {
      // Initialize safe service if needed
      await safeService.initialize();
      
      // Create the safe
      const safeResult = await safeService.createSafe(
        data.owners.map(owner => owner.address),
        data.threshold
      );
      
      setCreatedSafeResult(safeResult);
      
      // 企业级异步模式：立即提交交易记录，不等待区块链确认
      try {
        console.log('📝 创建Safe交易记录（异步模式）...');
        console.log('🔐 认证状态:', { isAuthenticated, hasToken: !!token, hasUser: !!user });
        console.log('🎫 Token preview:', token ? `${token.substring(0, 20)}...` : 'No token');
        
        const apiUrl = `${import.meta.env.VITE_API_BASE_URL || 'http://localhost:8080'}/api/v1/safes`;
        console.log('🌐 API URL:', apiUrl);
        
        // 新的异步请求格式：包含交易哈希
        const requestBody = {
          tx_hash: safeResult.transactionHash,  // 区块链交易哈希
          name: data.name,
          description: data.description || '',
          owners: data.owners.map(owner => owner.address),
          threshold: data.threshold,
          chain_id: 11155111 // Sepolia
        };
        console.log('📦 异步请求体:', requestBody);
        
        console.log('🚀 提交Safe创建交易记录...');
        const response = await fetch(apiUrl, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          },
          body: JSON.stringify(requestBody)
        });
        console.log('✅ 交易记录提交完成');
        
        console.log('📡 Response status:', response.status);
        
        if (!response.ok) {
          const errorData = await response.json();
          console.error('❌ 创建交易记录失败:', errorData);
          throw new Error(`交易记录创建失败: ${errorData.error || '未知错误'}`);
        }
        
        const result = await response.json();
        console.log('✅ Safe创建交易已记录:', result);
        
        // 保存交易信息用于状态跟踪
        const transactionInfo = {
          id: result.transaction.id,
          txHash: result.transaction.tx_hash,
          status: result.transaction.status,
          statusCheckUrl: result.next_steps.status_check_url,
          websocketTopic: result.next_steps.websocket_topic
        };
        
        // 存储到localStorage供状态页面使用
        localStorage.setItem('pendingSafeCreation', JSON.stringify(transactionInfo));
        
        // 显示异步成功消息
        setAsyncTransactionInfo(transactionInfo);
        
      } catch (apiError: any) {
        console.error('❌ API调用失败:', apiError);
        // 即使API失败，Safe已在区块链创建成功，显示警告但不阻止流程
        alert(`⚠️ Safe已在区块链创建成功，但交易记录保存失败：${apiError.message}\n\n请手动记录交易哈希：${safeResult.transactionHash}`);
      }
      
      setShowSuccess(true);
      
      console.log('Safe created successfully:', {
        address: safeResult.address,
        transactionHash: safeResult.transactionHash,
        blockNumber: safeResult.blockNumber,
        gasUsed: safeResult.gasUsed,
        name: data.name,
        description: data.description,
        owners: data.owners,
        threshold: data.threshold
      });
      
    } catch (error) {
      console.error('Failed to create safe:', error);
      
      // 显示详细错误信息
      let errorMessage = 'Failed to create safe. Please try again.';
      if (error instanceof Error) {
        errorMessage = error.message;
      }
      
      alert(`创建Safe失败: ${errorMessage}`);
    } finally {
      setIsCreating(false);
    }
  };

  if (showSuccess) {
    return (
      <Layout>
        <div className="min-h-screen flex items-center justify-center p-4">
          <Card className="max-w-lg w-full text-center">
            <CardContent className="p-8">
              <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <CheckCircle className="h-8 w-8 text-green-600" />
              </div>
              <h2 className="text-xl font-semibold text-gray-900 mb-2">
                Safe Created Successfully!
              </h2>
              <p className="text-gray-600 mb-4">
                Your multisig wallet has been deployed to the blockchain.
              </p>
              <div className="bg-gray-50 rounded-lg p-4 mb-6">
                <p className="text-sm font-medium text-gray-700 mb-1">Safe Address:</p>
                <p className="text-sm font-mono text-gray-900 break-all">
                  {createdSafeResult?.address}
                </p>
                <div className="mt-3 pt-3 border-t border-gray-200">
                  <p className="text-sm font-medium text-gray-700 mb-1">Transaction Hash:</p>
                  <p className="text-sm font-mono text-gray-900 break-all">
                    {createdSafeResult?.transactionHash}
                  </p>
                </div>
                <div className="mt-2 flex justify-between text-xs text-gray-500">
                  <span>Block: {createdSafeResult?.blockNumber}</span>
                  <span>Gas Used: {createdSafeResult?.gasUsed}</span>
                </div>
              </div>
              <div className="flex flex-col sm:flex-row gap-3">
                <Button
                  onClick={() => navigate('/safes')}
                  className="flex-1"
                >
                  View All Safes
                </Button>
                <Button
                  variant="outline"
                  onClick={() => navigate('/')}
                  className="flex-1"
                >
                  Back to Dashboard
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>
      </Layout>
    );
  }

  return (
    <Layout>
      <div className="max-w-4xl mx-auto p-4 sm:p-6 space-y-6">
        {/* Header */}
        <div className="flex items-center space-x-4">
          <Button
            variant="outline"
            size="sm"
            onClick={() => navigate(-1)}
            className="flex items-center space-x-2"
          >
            <ArrowLeft className="h-4 w-4" />
            <span>Back</span>
          </Button>
          <div>
            <h1 className="text-2xl sm:text-3xl font-bold text-gray-900 flex items-center">
              <Shield className="h-8 w-8 mr-3 text-emerald-600" />
              Create New Safe
            </h1>
            <p className="text-gray-600 mt-1">
              Deploy a new multisig wallet with custom owners and threshold
            </p>
          </div>
        </div>

        {/* Wallet Connection */}
        {!isConnected && (
          <Card className="bg-amber-50 border-amber-200">
            <CardContent className="p-4">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-3">
                  <Wallet className="h-5 w-5 text-amber-600" />
                  <div>
                    <p className="font-medium text-amber-800">Wallet Not Connected</p>
                    <p className="text-sm text-amber-700">Connect your wallet to create a Safe</p>
                  </div>
                </div>
                <Button onClick={handleConnectWallet} size="sm">
                  Connect Wallet
                </Button>
              </div>
            </CardContent>
          </Card>
        )}

        {/* Network Info */}
        {networkInfo && (
          <Card className="bg-blue-50 border-blue-200">
            <CardContent className="p-4">
              <div className="flex items-center space-x-3">
                <Info className="h-5 w-5 text-blue-600" />
                <div className="text-sm text-blue-800">
                  <p className="font-medium">Network: {networkInfo.config.name}</p>
                  <p>Chain ID: {networkInfo.chainId}</p>
                </div>
              </div>
            </CardContent>
          </Card>
        )}

        <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
          {/* Basic Information */}
          <Card className="shadow-lg">
            <CardHeader className="bg-gradient-to-r from-gray-50 to-gray-100">
              <CardTitle className="text-xl font-semibold text-gray-800 flex items-center">
                <Settings className="h-5 w-5 mr-2" />
                Basic Information
              </CardTitle>
            </CardHeader>
            <CardContent className="p-6 space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <Input
                  label="Safe Name"
                  {...register('name')}
                  error={errors.name?.message}
                  placeholder="e.g., Company Treasury"
                />
                <Input
                  label="Threshold"
                  type="number"
                  {...register('threshold', { valueAsNumber: true })}
                  error={errors.threshold?.message}
                  min="1"
                  max={watchedOwners.length}
                  helperText={`Required signatures: ${watchedThreshold} of ${watchedOwners.length}`}
                />
              </div>
              <Input
                label="Description (Optional)"
                {...register('description')}
                error={errors.description?.message}
                placeholder="Brief description of this Safe's purpose"
              />
            </CardContent>
          </Card>

          {/* Owners Configuration */}
          <Card className="shadow-lg">
            <CardHeader className="bg-gradient-to-r from-gray-50 to-gray-100">
              <CardTitle className="text-xl font-semibold text-gray-800 flex items-center justify-between">
                <div className="flex items-center">
                  <Users className="h-5 w-5 mr-2" />
                  Owners ({fields.length})
                </div>
                <Button
                  type="button"
                  variant="outline"
                  size="sm"
                  onClick={addOwner}
                  className="flex items-center space-x-1"
                >
                  <Plus className="h-4 w-4" />
                  <span>Add Owner</span>
                </Button>
              </CardTitle>
            </CardHeader>
            <CardContent className="p-6">
              <div className="space-y-4">
                {fields.map((field, index) => (
                  <div key={field.id} className="flex items-start space-x-3 p-4 bg-gray-50 rounded-lg">
                    <div className="flex-1 grid grid-cols-1 md:grid-cols-2 gap-3">
                      <Input
                        label={`Owner ${index + 1} Name`}
                        {...register(`owners.${index}.name`)}
                        error={errors.owners?.[index]?.name?.message}
                        placeholder="Owner name or identifier"
                      />
                      <Input
                        label="Ethereum Address"
                        {...register(`owners.${index}.address`)}
                        error={errors.owners?.[index]?.address?.message}
                        placeholder="0x..."
                        className="font-mono text-sm"
                      />
                    </div>
                    {fields.length > 1 && (
                      <Button
                        type="button"
                        variant="outline"
                        size="sm"
                        onClick={() => removeOwner(index)}
                        className="mt-6 text-red-600 hover:text-red-700 hover:bg-red-50"
                      >
                        <Trash2 className="h-4 w-4" />
                      </Button>
                    )}
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>

          {/* Security Information */}
          <Card className="bg-blue-50 border-blue-200">
            <CardContent className="p-4">
              <div className="flex items-start space-x-3">
                <AlertCircle className="h-5 w-5 text-blue-600 mt-0.5 flex-shrink-0" />
                <div className="text-sm text-blue-800">
                  <p className="font-medium mb-1">Security Guidelines</p>
                  <ul className="space-y-1 text-blue-700">
                    <li>• Ensure all owner addresses are correct and controlled by trusted parties</li>
                    <li>• Set an appropriate threshold - not too low (insecure) or too high (impractical)</li>
                    <li>• Consider using hardware wallets for owner accounts</li>
                    <li>• Keep a secure backup of all owner information</li>
                    <li>• Test with small amounts before transferring large funds</li>
                  </ul>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Submit Button */}
          <div className="flex justify-end space-x-3 pt-4">
            <Button
              type="button"
              variant="outline"
              onClick={() => navigate(-1)}
            >
              Cancel
            </Button>
            <button
              type="submit"
              disabled={!isAuthenticated || !isConnected || isCreating}
              className="bg-emerald-600 hover:bg-emerald-700"
            >
              {isCreating ? 'Creating Safe...' : 'Create Safe'}
            </button>
          </div>
        </form>
      </div>
    </Layout>
  );
};
